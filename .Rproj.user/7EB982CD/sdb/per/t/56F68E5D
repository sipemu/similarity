{
    "collab_server" : "",
    "contents" : "#ifndef DISTANCEAPI_H\n#define DISTANCEAPI_H\n\n// [[Rcpp::depends(RcppArmadillo)]]\n#include<RcppArmadillo.h>\n\n#include \"distance/distance.h\"\n#include \"parallelFrameworks.h\"\n\n#include \"ranger/rangerForest.h\"\n#include \"containers/nodeDistContainer.h\"\n\n/**\n * Distance Calculation\n */\nclass distanceAPI {\npublic:\n  distanceAPI() {};\n  void init(arma::mat& x, std::string method = \"euclidian\", std::size_t p = 2);\n  arma::vec get() {return output_;};\n  \nprotected:\n  void set_distance(std::string distMethod = \"euclidian\", std::size_t p = 2);\n  void calc(arma::mat& x);\n\n  std::shared_ptr<distance> dist_;\n  arma::vec output_;\n};\n\n\n/**\n * Weighted Distance Calculation\n */\nclass weightedDistanceAPI : public distanceAPI {\npublic:\n  void init(arma::mat& x, arma::rowvec& weights);\n  \nprotected:\n  virtual void set_distance(arma::rowvec& weights);\n};\n\n\n/**\n * XY Distance Calculation\n */\nclass xyDistanceAPI : public distanceAPI {\npublic:\n  void init(arma::mat& x, arma::mat& y, std::string method = \"euclidian\", std::size_t p = 2);\n  arma::mat get() {return output_;};\n  \nprotected:\n  virtual void calc(arma::mat& x, arma::mat& y);\n  arma::mat output_;\n};\n\n\n/**\n * Weighted XY Distance Calculation\n */\nclass weightedXYDistanceAPI : public xyDistanceAPI {\npublic:\n  void init(arma::mat& x, arma::mat& y, arma::rowvec& weights);\n  arma::mat get() {return output_;};\n  \nprotected:\n  void calc(arma::mat& x, arma::mat& y);\n  virtual void set_distance(arma::rowvec& weights);\n  \n  arma::mat output_;\n};\n\n\n/**\n * RandomForests Terminal Node Distance\n */\nclass rfTerminalNodeDistanceAPI : public distanceAPI {\npublic:\n  void init(arma::umat& nodeIDs);\n  Rcpp::DataFrame get() {return output_.asDataFrame();};\n  \nprotected:\n  void set_distance() {};\n  void calc() {};\n  \n  RfDistContainer output_;\n};\n\n\n/**\n * RandomForests Proximity Matrix\n */\nclass rfProximityDistanceAPI : public distanceAPI {\npublic:\n  void init(arma::mat& x);\n  \nprotected:\n  void set_distance(arma::mat& x);\n};\n\n/**\n * RandomForests XY Proximity Matrix\n */\nclass rfProximityXYDistanceAPI : public rfProximityDistanceAPI {\npublic:\n  void init(arma::mat& x, arma::mat& y);\n  arma::mat get() {return output_;};\n  \nprotected:\n  virtual void calc(arma::mat& x, arma::mat& y);\n  \n  arma::mat output_;\n};\n\n\n/**\n * RandomForests Depth Distance Calculation\n */\nclass rfDepthDistanceAPI : public distanceAPI {\npublic:\n  void init(arma::mat& xNodeIDs, arma::umat& terminalNodeIDs);\n  \nprotected:\n  void set_distance(RfDistContainer& nodeDists);\n  virtual void calc(arma::mat& xNodeIDs);\n};\n\n\n/**\n * RandomForests XY Depth Distance Calculation\n */\nclass rfDepthXYDistanceAPI : public rfDepthDistanceAPI {\npublic:\n  void init(arma::mat& xNodeIDs, arma::mat& yNodeIDs, arma::umat& terminalNodeIDs);\n  arma::mat get() {return output_;};\n  \nprotected:\n  virtual void calc(arma::mat& xNodeIDs, arma::mat& yNodeIDs);\n  \n  arma::mat output_;\n};\n\n#endif\n",
    "created" : 1489095346169.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2864276804",
    "id" : "56F68E5D",
    "lastKnownWriteTime" : 1476853641,
    "last_content_update" : 1476853641,
    "path" : "D:/Programmierung/Github/similarity/src/distanceAPI.h",
    "project_path" : "src/distanceAPI.h",
    "properties" : {
    },
    "relative_order" : 14,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "h"
}