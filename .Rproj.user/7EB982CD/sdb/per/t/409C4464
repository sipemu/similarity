{
    "collab_server" : "",
    "contents" : "#define STRICT_R_HEADERS\n\n// [[Rcpp::depends(RcppParallel)]]\n#include <RcppParallel.h>\n// [[Rcpp::depends(RcppArmadillo)]]\n#include <RcppArmadillo.h>\n\n#include \"distance/distance.h\"\n\n#include <memory>\n\ntypedef tbb::concurrent_unordered_map<std::pair<int, int>, double> tbbUPMap;\ntypedef tbb::concurrent_unordered_map<int, double> tbbUMap;\n\n// TODO: Representation of Results\n// column-wise, row-wise, or full\n#if RCPP_PARALLEL_USE_TBB\n\nstruct parallelDistance : public RcppParallel::Worker {\n  const arma::mat& input_;\n  std::shared_ptr<distance> dist_;\n  const std::size_t nrow_;\n  arma::vec& output_;\n  \n  parallelDistance(\n    const arma::mat& input,\n    const std::shared_ptr<distance> dist,\n    const std::size_t nrow,\n    arma::vec& output\n  ) : input_(input), dist_(dist), nrow_(nrow), output_(output) {}\n  \n  void operator() (std::size_t begin, std::size_t end) {\n    for (std::size_t i=begin;i<end;++i) {\n      for (std::size_t j=i+1;j<nrow_;++j) {\n        output_((2 * i * nrow_ - i * i + 2 * j - 3 * i - 2) / 2) = dist_->calc_distance(input_.row(i), input_.row(j));\n      }\n    }\n  }\n};\n\n\nstruct parallelDistanceNM : public RcppParallel::Worker {\n  const arma::mat& inputX_;\n  const arma::mat& inputY_;\n  std::shared_ptr<distance> dist_;\n  const int nrow_;\n  arma::mat& output_;\n  \n  parallelDistanceNM(\n    const arma::mat& inputX,\n    const arma::mat& inputY,\n    const std::shared_ptr<distance> dist,\n    const int nrow,\n    arma::mat& output\n  ) : inputX_(inputX), inputY_(inputY), dist_(dist), nrow_(nrow), output_(output) {}\n  \n  void operator() (std::size_t begin, std::size_t end) {\n    std::size_t nrow2 = inputY_.n_rows;\n    for (std::size_t i=begin;i<end;++i) {\n      for (std::size_t j=0;j<nrow2;++j) {\n        output_(i, j) = dist_->calc_distance(inputX_.row(i), inputY_.row(j));\n      }\n    }\n  }\n};\n\n\nstruct parallelMatrixNorm : public RcppParallel::Worker {\n  const arma::mat& inputX_;\n  const arma::mat& inputY_;\n  std::shared_ptr<distance> dist_;\n  arma::vec& output_;\n  \n  parallelMatrixNorm(\n    const arma::mat& inputX,\n    const arma::mat& inputY,\n    const std::shared_ptr<distance> dist,\n    arma::vec& output\n  ) : inputX_(inputX), inputY_(inputY), dist_(dist), output_(output) {}\n  \n  void operator() (std::size_t begin, std::size_t end) {\n    for (std::size_t i=begin;i<end;++i) {\n      output_(i) = dist_->calc_distance(inputX_.row(i), inputX_.row(i));\n    }\n  }\n};\n\n#else\n\n// no single threated implementation\n\n#endif\n",
    "created" : 1490819530721.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1944020591",
    "id" : "409C4464",
    "lastKnownWriteTime" : 1489014620,
    "last_content_update" : 1489014620,
    "path" : "D:/Programmierung/Github/similarity/src/parallelFrameworks.h",
    "project_path" : "src/parallelFrameworks.h",
    "properties" : {
    },
    "relative_order" : 5,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "h"
}