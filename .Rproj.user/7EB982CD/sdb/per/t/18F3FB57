{
    "collab_server" : "",
    "contents" : "#ifndef DISTANCE_H\n#define DISTANCE_H\n\n// [[Rcpp::depends(RcppArmadillo)]]\n#include<RcppArmadillo.h>\n\n#include \"../containers/nodeDistContainer.h\"\n\nclass distance {\npublic:\n  distance() {};\n  \n  virtual double calc_distance(const arma::subview_row<double>& x, const arma::subview_row<double>& y) const {\n    return 0.0;\n  };\n  \n  void set_parameters() {};\n};\n\n// weighted distance\nclass weightedDistance : public distance {\npublic:\n  virtual double calc_distance(const arma::subview_row<double>& x, const arma::subview_row<double>& y) const {\n    return std::abs(arma::sum(weights_ % (x - y)));\n  };\n  \n  void set_parameters(arma::rowvec& weights) {\n    weights_ = weights;\n  };\nprivate:\n  arma::rowvec weights_;\n};\n\n// euclidian distance\nclass euclidianDistance : public distance {\npublic:\n  virtual double calc_distance(const arma::subview_row<double>& x, const arma::subview_row<double>& y) const {\n    return std::sqrt(arma::sum(arma::square((x - y))));\n  };\n  \n  void set_parameters() {\n  };\n};\n\n// minkowski distance\nclass minkowskiDistance : public distance {\npublic:\n  virtual double calc_distance(const arma::subview_row<double>& x, const arma::subview_row<double>& y) const {\n    return std::pow(arma::sum(arma::abs(arma::pow(x - y, p_))), 1. / p_);\n  };\n  \n  void set_parameters(std::size_t p) {\n    p_ = p;\n  };\nprivate:\n  std::size_t p_;\n};\n\n// manhattan distance\nclass manhattanDistance : public distance {\npublic:\n  virtual double calc_distance(const arma::subview_row<double>& x, const arma::subview_row<double>& y) const {\n    return arma::sum(arma::abs(x - y));\n  };\n  void set_parameters() {\n  };\n};\n\n// maximum distance\nclass maximumDistance : public distance {\npublic:\n  virtual double calc_distance(const arma::subview_row<double>& x, const arma::subview_row<double>& y) const {\n    return arma::max(arma::abs(x - y));\n  };\n  void set_parameters() {};\n};\n\n\n// cosine distance\nclass cosineDistance : public distance {\npublic:\n  virtual double calc_distance(const arma::subview_row<double>& x, const arma::subview_row<double>& y) const {\n    double denom = std::sqrt(arma::sum(arma::square(x))) * std::sqrt(arma::sum(arma::square(y)));\n    if (denom == 0)\n      return 0.0;\n    else\n      return arma::dot(x, y) / denom;\n  };\n  void set_parameters() {};\n};\n\n\n// random forest proximity\nclass rangerProximity : public distance {\npublic:\n  virtual double calc_distance(const arma::subview_row<double>& x, const arma::subview_row<double>& y) const {\n    int similarity = 0;\n    for (std::size_t i=0;i<x.n_elem;++i) {\n      if (x(i) == y(i)) {\n        ++similarity;\n      }\n    }\n    return similarity * 1. / nTrees_;\n  };\n  \n  void set_parameters(std::uint32_t nTrees) {\n    nTrees_ = nTrees;\n  };\nprivate:\n  std::uint32_t nTrees_;\n};\n\n// random forest depth distance\nclass rfDepthDistance : public distance {\npublic:\n  virtual double calc_distance(const arma::subview_row<double>& x, const arma::subview_row<double>& y) const {\n    double sum = 0.0;\n    double d = 0.0;\n    std::size_t nTree = 0;\n    for (std::size_t t=0; t<nTrees_;++t) {\n      if (x[t] < y[t]) {\n        d = nodeDists_.getValue(x[t], y[t], t);\n      } else if (x[t] > y[t]) {\n        d = nodeDists_.getValue(y[t], x[t], t);\n      } else {\n        d = 0.0;\n        ++nTree;\n      }\n      if (d > 0.0) {\n        // TODO: set trafo\n        sum += d;\n        ++nTree;\n      }\n    }\n    return sum; // * 1. / nTree\n  };\n  \n  void set_parameters(RfDistContainer nodeDist) {\n    nodeDists_ = nodeDist;\n    nTrees_ = nodeDist.getNTree();\n  };\nprivate:\n  RfDistContainer nodeDists_;\n  std::uint32_t nTrees_;\n};\n\n#endif\n",
    "created" : 1476845819695.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1632735353",
    "id" : "18F3FB57",
    "lastKnownWriteTime" : 1490820301,
    "last_content_update" : 1490820301272,
    "path" : "D:/Programmierung/Github/similarity/src/distance/distance.h",
    "project_path" : "src/distance/distance.h",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "h"
}